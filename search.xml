<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>N1盒子折腾记录</title>
      <link href="/2020/04/09/4/"/>
      <url>/2020/04/09/4/</url>
      
        <content type="html"><![CDATA[<p>抱着学习linux的目的，一直想入树莓派，偶然间在某山论坛了解了N1盒子从此一发不可收拾。这次借着疫情宅家的机会终于入手，开始对某讯N1盒子折腾降级+刷入armbian系统。</p><span id="more"></span><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>了解开发板的小伙伴应该大多知道树莓派，但是很多人表示树莓派需要折腾硬件。后来无意中在坛子里看见大佬们折腾的矿渣——某讯N1盒子，深入了解一下发现比较适合自己，可玩性很高。随后直接PDD上搞了个九成新的开耍。<br>友情提示这货由于不可描述的原因，某宝某鱼都买不到（至少我没发现），仅PDD和企鹅家的转转上面有货。自从倒爷进场后价格一路飙升，从六七十涨到了100+（心酸），想入手的还是要趁早（哭）。<br>博主入手的时间较晚，大佬们已经开发了很多玩法同时也总结了很多经验<del>（踩坑）</del>，N1盒子基于arm架构，可刷的系统不少，比如 Arch Linux、Kail Linux、Armbian等，博主选择了大多数人推荐的armbian5.77系统。本文基于win10操作，简单介绍一下降级和刷入系统，后续可能还会写一些玩法方面的帖子总结踩坑经历。</p><h5 id="简单介绍一下这个盒子："><a href="#简单介绍一下这个盒子：" class="headerlink" title="简单介绍一下这个盒子："></a>简单介绍一下这个盒子：</h5><ul><li>CPU为4核的晶晨S905D，自带2G内存，超出大部分电视盒子配置（谁让这货出生是为了挖矿）</li><li>自带8G的存储（<del>奇怪的</del>emmc存储），linux系统可以直接刷到盒子里，后期不用额外插U盘引导。</li><li>arm64架构，可玩耍64位linux系统以及docker</li><li>千兆有线网口，2.4&#x2F;5G双频wifi + 蓝牙，支持HDMI输出，没有音频输出。</li><li>唯一有点遗憾的可能就是USB2.0接口了，不过还可以接受</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="1-硬件准备"><a href="#1-硬件准备" class="headerlink" title="1.硬件准备"></a>1.硬件准备</h5><ul><li>N1盒子<del>（废话）</del></li><li>12v2a电源（这里插一句，盒子原厂的是2a的，但是目前二手盒子大多是没有原厂电源的，可自行准备或者购买普通12v1.5a电源，1.5a的经博主测试也是完全没问题的）</li><li>U盘一只（容量最好大于4G，接口方面一些大佬建议最好是USB2.0，博主用的便是USB2.0的，USB3.0的未经测试）<br>如果不需要刷安卓电视系统的话，亲测是用不到USB双公头的，可以省一点钱。</li></ul><h5 id="2-软件准备"><a href="#2-软件准备" class="headerlink" title="2.软件准备"></a>2.软件准备</h5><ul><li>Armbian镜像：Armbian_5.77_Aml-s905_Debian_stretch_default_5.0.2_20190401.img</li><li>大佬的dtb文件：meson-gxl-s905d-phicomm-n1-xiangsm.dtb</li><li>W大的降级工具：斐讯T1、N1官方系统降级工具</li><li>制作安装U盘工具：USB Image Tool（或其他替代品）</li><li>SSH管理工具：MobaXterm（Putty、Xshell和SecureCRT也可以）</li></ul><h4 id="制作安装U盘"><a href="#制作安装U盘" class="headerlink" title="制作安装U盘"></a>制作安装U盘</h4><blockquote><p><strong>警告：烧录有风险，该操作会格式化U盘，U盘上有重要文件可能会导致数据丢失！注意备份文件！</strong></p></blockquote><ol><li>保证镜像是img格式，如果下载的镜像为7z或其他压缩文件，需先进行解压缩。</li><li>插入U盘后打开USB Image Tool工具，点击reset恢复，此时如弹出格式化的提示就进行格式化操作（提示：部分U盘插入电脑可能会提示格式化，这时候不要点！需要通过USB Image Tool工具的reset后格式化才可以）</li><li>格式化完成后，点击restore选择镜像开始烧录，等待烧录完成。</li><li>烧录完成后系统会重新识别U盘，此时会提示格式化，一定要点取消！此时查看会有一个可识别的boot分区。</li><li>打开boot分区中的dtb文件夹，将准备好的dtb文件粘贴进去。</li><li>打开boot分区根目录的uEnv.ini 文件，修改第一行的dtb_name属性为刚放进去的dtb文件名，具体为<code>dtb_name=/dtb/meson-gxl-s905d-phicomm-n1-xiangsm.dtb</code></li><li>保存退出，此时U盘已制作完成。</li></ol><h4 id="N1盒子降级"><a href="#N1盒子降级" class="headerlink" title="N1盒子降级"></a>N1盒子降级</h4><blockquote><p><strong>友情提示：降级操作一个盒子仅需要操作一次</strong></p></blockquote><ol><li>将盒子用HDMI连接显示器（电视也可以），接入鼠标，连接网络（有线无线都可以，建议有条件还是用有线）</li><li>检测版本号，如果为2.2版本一下就不用降级了，否则便需要降级操作。（同时记录IP地址，后面会用到）</li><li>鼠标左键点击四下【固件版本】，会提示打开adb（完成后可以拔掉HDMI和鼠标了）</li><li>确保电脑与盒子在同一局域网下，解压W大的N1降级工具后运行onekey文件夹中的run.bat文件，输入【2】然后回车，后续根据提示操作即可。</li></ol><h4 id="启动U盘中的armbian系统"><a href="#启动U盘中的armbian系统" class="headerlink" title="启动U盘中的armbian系统"></a>启动U盘中的armbian系统</h4><blockquote><p>网上一些教程中到此会要求连接U盘后插电开机，但经博主测试此时直接断电插电后不会进入U盘引导，依旧会进入盒子本身的系统。正确进入U盘引导方法有两个：通过W大降级工具的功能3触发以及通过adb命令触发，由于博主没准备USB双公头，故此利用adb触发，执行命令：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb connect IP地址:5555</span><br><span class="line">adb shell reboot update</span><br></pre></td></tr></table></figure><p><strong>不要在盒子本身的系统开机的情况下插入U盘，否则U盘中的文件权限会被篡改！插入U盘之前一定先关机！</strong></p><ol><li>输入上述两条命令后断电，由于盒子没有电源开关，故此断电仅需拔掉电源。</li><li>N1盒子的USB接口有两个，将制作好的U盘插入盒子上靠近HDMI的USB接口（有大佬指出盒子本身的两个USB接口供电有缺陷，保险起见优先使用靠近HDMI的USB接口）。</li><li>插电后会进入Ｕ盘引导armbian系统，此时如果连接HDMI输出，会看到引导过程。结束标志为 <code>aml login：</code></li><li>由于此时未配置无线连接，需用有线连接盒子，然后便可通过SSH连接盒子了。</li></ol><h4 id="将armbian系统写入emmc-分区"><a href="#将armbian系统写入emmc-分区" class="headerlink" title="将armbian系统写入emmc 分区"></a>将armbian系统写入emmc 分区</h4><p>此时进入的armbian系统为U盘引导，为了达到后期不用U盘的目的，需将armbian系统写入盒子自带的emmc分区（该操作会破坏盒子本身系统）</p><ol><li>SSH连接盒子需用到前面记录的盒子IP，登录用户名 root，初始密码 1234，端口默认22。</li><li>首次登录会要求修改密码，依次输入原密码 1234，新密码，重复新密码。注意输入的密码为不可见状态。修改完成后还会提示建立新用户，博主为了方便就不建了，直接Ctrl + C 中断操作，用 root 用户和新密码重新登录。</li><li>登陆成功会提示<code>Welcome to ARMBIAN 5.77 user-built Debian GNU/Linux 9 (stretch) 5.0.2-aml-s905</code></li><li>利用<code>ls -l /</code>命令确认一下目录权限没有被篡改，都是root用户即可。</li><li>写入emmc分区时，很多教程中提到的执行<code>/root/install.sh</code>，但实际上这个脚本似乎存在问题。经博主查询资料后得出结论，直接执行<code>nand-sata-install</code>便可完成写入<br>写入完成后，输入<code>poweroff</code>进行关机，然后拔掉U盘，所有刷机工作就结束了。下次插电开机会直接进入盒子的armbian系统。<blockquote><p>如果想重刷armbian系统，那么还是用刚刚的U盘启动armbian，重新执行<code>nand-sata-install</code>即可完整覆盖掉emmc中的数据，不必利用ddbr或者线刷先恢复到安卓系统再重来。</p></blockquote></li></ol><h4 id="armbian系统的简单配置"><a href="#armbian系统的简单配置" class="headerlink" title="armbian系统的简单配置"></a>armbian系统的简单配置</h4><h5 id="修改apt镜像源"><a href="#修改apt镜像源" class="headerlink" title="修改apt镜像源"></a>修改apt镜像源</h5><p>源配置文件为<code>/etc/apt/sources.list</code>，打开后将自带源用#注释掉，在下面添加国内的镜像源，添加前需确认是否提供 arm 架构的软件包，很多商业源可能并没有收录 arm 架构的软件包。<br>博主用的是清华镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb [ arch=arm64,armhf ] https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-free</span><br><span class="line">deb [ arch=arm64,armhf ] https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class="line">deb [ arch=arm64,armhf ] https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class="line">deb [ arch=arm64,armhf ] https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure><p>不更新驱动和内核的话可以直接删掉<code>/etc/apt/sources.list.d/armbian.list </code></p><blockquote><p>文本操作一般用vim，博主还是喜欢nano，或者WinSCP等工具也可以。修改前请确认linux 发行版，博主的armbian是基于Debian9的，如果是Ubuntu或者其他，请自行查找对应的镜像源。</p></blockquote><p>修改完成后运行<code>apt-get update</code>及<code>apt-get upgrade</code>更新升级软件包。</p><h5 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h5><p>修改为东八区（UTC+8）可以用命令修改，博主这里是用的<code>armbian-config</code>配置修改。<br>执行<code>armbian-config</code>命令，选择personal，然后配置Timezone为chongqing或shanghai即可。</p><h5 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h5><p>优先执行<code>armbian-config</code>命令，选择personal，然后检查locales是否配置了<code>en_US.utf-8</code>。如果已配置，继续修改<code>/etc/environment</code>文件，用文本打开后修改<code>LC_ALL</code>的值为<code>en_US.utf-8</code>。</p><h5 id="启动BBR"><a href="#启动BBR" class="headerlink" title="启动BBR"></a>启动BBR</h5><p>BBR的鼎鼎大名不用多说，博主用的系统默认没有启动BBR，应执行如下命令来启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>随后通过如下命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br><span class="line"># 返回值应包含 tcp_bbr                </span><br><span class="line">sysctl net.core.default_qdisc</span><br><span class="line"># 返回值应为 net.core.default_qdisc = fq </span><br><span class="line">sysctl net.ipv4.tcp_congestion_control </span><br><span class="line"># 返回值应为 net.ipv4.tcp_congestion_control = bbr </span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control </span><br><span class="line"># 返回值应为 net.ipv4.tcp_available_congestion_control = reno cubic bbr </span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>至于写入静态MAC地址、删除默认DNS等，博主并没有操作，有需要的话可以自行查阅。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>至此N1盒子降级并刷入armbian系统便告一段落，可以作为轻量的本地linux服务器继续折腾，比如安装docker、OMV等，也可以用U盘刷个外挂emuelec当游戏机，或者刷个OP作为路由器使用。博主还安装了自动签到框架和asf用来挂卡<del>（steam乱入）</del>，大佬测试其待机功耗2w-4w左右，24小时开机也压力不大，温度维持在40多度。<br>这几天爬了不少帖子，再次感谢大佬们带来的各种教程和工具，才让我等小白也能玩上（笑）</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯N1 – 完美刷机Armbian教程</a></li><li><a href="https://www.dragoncave.me/2019/07/armbian-on-n1.html">斐讯N1折腾记 - Armbian 5.77 刷入与优化</a></li><li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=510423">Armbian-5.77 on N1, so far so good</a></li><li><a href="https://www.zrj96.com/post-1159.html">斐讯N1刷Armbian探索总结</a></li><li><a href="https://luotianyi.vc/1306.html">斐讯N1探索手记#1 – 降级并刷入armbian系统</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客并应用next主题小记</title>
      <link href="/2020/04/01/3/"/>
      <url>/2020/04/01/3/</url>
      
        <content type="html"><![CDATA[<p>无意中了解到静态页面免费托管搭建博客，折腾好久各种爬帖终于有所小成，本文用以记录并帮助同样需要的小伙伴。</p><span id="more"></span><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>相信看到这篇文章的小伙伴都应该简单了解了静态页面托管服务（不知道的简单百度一下哈），比较出名的应该就是 <strong><a href="https://github.com/">Github</a></strong> 提供的静态页面托管服务。但是由于某些你懂的原因，这个同性交友网站在国内的的速度并不是那么的友好。故此博主多方了解之下，选择了 <strong><a href="https://coding.net/">coding</a></strong> 这个人气比较高的网站进行博客搭建。</p><h4 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h4><p>搭建需要的工具包括了电脑<del>（废话）</del>、coding账号、Git、Node.js，具体搭建操作过程不多赘述，网上帖子一大把，本文仅提及几个地方：</p><h5 id="1-Git下载及安装"><a href="#1-Git下载及安装" class="headerlink" title="1. Git下载及安装"></a>1. Git下载及安装</h5><p>Git下载官网不定时抽风，这里提供一个国内的<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像下载地址</a>，安装建议直接默认路径，以避免出现奇怪的问题。作为版本控制工具，如果有小伙伴想进一步了解学习Git的话，推荐<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰大神的 Git 教程</a> 。</p><h5 id="2-npm国内镜像源更换"><a href="#2-npm国内镜像源更换" class="headerlink" title="2. npm国内镜像源更换"></a>2. npm国内镜像源更换</h5><p>依旧是某些你懂的原因，建议将npm下载源更换为国内镜像源，博主用的是<a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝npm镜像</a>，更换方法为<code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，从此以后命令中的npm均替换为cnpm，速度提升不少。</p><h5 id="3-hexo安装及常用命令"><a href="#3-hexo安装及常用命令" class="headerlink" title="3. hexo安装及常用命令"></a>3. hexo安装及常用命令</h5><p>修改过源的hexo安装命令为：<code>cnpm install -g hexo-cli</code><br>安装完成后执行初始化命令，生成的文件结构中后期主要接触的部分如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">├   └── _posts         //文章目录，以后写的md格式文章均放置于此</span><br><span class="line">├── themes             //主题文件夹，新安装主题都要放在这里面</span><br><span class="line">├   └── landscape          //默认主题</span><br><span class="line">├── _config.yml            //站点配置文件 </span><br></pre></td></tr></table></figure><p>hexo使用中常用命令包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;文章名字&quot;         //新建文章</span><br><span class="line">hexo cl =  hexo clean            //清除缓存</span><br><span class="line">hexo g  =  hexo generate         //生成静态页面</span><br><span class="line">hexo d  =  hexo deploy           //开始部署</span><br><span class="line">hexo s  =  hexo server           //启动服务预览（适用于本地预览）</span><br></pre></td></tr></table></figure><p>本地部署预览常用 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s </code>，预览没有问题的话可以直接部署到网站上，命令为<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d </code></p><h5 id="4-coding部署"><a href="#4-coding部署" class="headerlink" title="4. coding部署"></a>4. coding部署</h5><p>开启coding的静态页面托管需实名认证，新建项目应选择类型为<strong>DevOps 项目</strong>，第一次Git部署完成后需进入“构建与部署”里创建静态网站。部署完成后页面需几分钟才可加载成功。另外Git新手常犯的一个误区就是部署配置里的repo地址应为如下结构：<code>git@e.coding.net:团队名/项目名/仓库名.git</code>，与Github的格式略有不同。这一点老鸟问题不大，但初次使用Git的新手容易搞蒙<del>（博主就是）</del></p><h4 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h4><p>hexo自带一个主题，不过实在是略丑，网上人气颇高的主题为next，本站也使用的这个主题，可自行下载解压到themes文件夹或者通过Git安装。以下无特殊说明均适用于next7.7.2版本。</p><h5 id="1-站点配置文件"><a href="#1-站点配置文件" class="headerlink" title="1. 站点配置文件"></a>1. 站点配置文件</h5><ul><li>hexo文件夹中的<code>_config.yml</code>文件为站点配置文件，用于整个博客的基本配置。其中Site部分是需要我们补充填写的，值得注意的是 language 的填写，网上很多帖子里写的中文应填写“zh-Hans”，经博主测试目前正确填写应为“zh-CN”。亦可通过<code>hexo\themes\next\languages</code>文件夹中的文件名称得知，最后将theme字段填写为next即可配置完成。</li><li>所有的配置属性: 后面不要忘记有个空格，这样才会生效（同样适用于主题配置文件）。</li><li>如果配置文件中包含汉字，建议保存后检查下编码是否为UTF-8，否则部署后会乱码（同样适用于主题配置文件）。</li></ul><h5 id="2-主题配置文件"><a href="#2-主题配置文件" class="headerlink" title="2. 主题配置文件"></a>2. 主题配置文件</h5><p><code>themes\next</code>中的<code>_config.yml</code>文件为next主题配置文件</p><ul><li>menu配置中的顺序可以自行调整，用以调整博客菜单的顺序</li><li>新菜单开启后是没有对应文件的，所以要手动生成 about、tags、categories等，方法使用<code>hexo new page</code>命令</li><li>字体更改仅需修改font部分，不再需要修改styl文件</li><li>本站使用字体为思源宋体，host设置为 <a href="https://css.loli.net/">https://css.loli.net/</a> 提供的Google字体库，感谢大佬</li><li>auto_excerpt 设置自动阶段文章内容作为摘要的功能在新版的next已经被废弃了，官方建议在文章中添加 <code>&lt;!-- more --&gt;</code> 来精确控制摘要内容。<blockquote><p>官方公告：auto_excerpt不是主题应负责的功能。自 7.6.0 版本开始，此功能被移除，请自行安装第三方插件。</p></blockquote></li><li>动态背景设定从官方自带变成了需自行下载安装后设置，个人感觉无必要性，设置静态图片页面更好看。</li><li>新版本中已经不存在<code>themes\next\source\css\_custom\custom.styl</code>文件了，<br>经测试修改<code>themes\next\source\css\_common\components\back-to-top.styl</code>文件可完成同样效果</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT (v7.0+) 主题配置</a></li><li><a href="https://qianfanguojin.github.io/2019/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/">Hexo博客搭建记录（二）：基本主题设置以及美化</a></li><li><a href="https://yi-yun.github.io/Hexo-Next-Custom/">Hexo Next 博客自定义配置</a></li><li><a href="https://ouuan.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/">hexo博客搭建指北</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3Learning</title>
      <link href="/2020/03/30/2/"/>
      <url>/2020/03/30/2/</url>
      
        <content type="html"><![CDATA[<p>记录python3自定义学习序列</p><span id="more"></span><h2 id="自2018-11-15日开始网络自学python3，自定义学习序列如下："><a href="#自2018-11-15日开始网络自学python3，自定义学习序列如下：" class="headerlink" title="自2018.11.15日开始网络自学python3，自定义学习序列如下："></a>自2018.11.15日开始网络自学python3，自定义学习序列如下：</h2><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><h4 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h4><ul><li>极客时间入门视频</li><li>简明python书籍</li><li><a href="https://www.bilibili.com/video/av25675370">笨方法学python3视频</a></li><li>小甲鱼入门视频</li><li>小象学院入门学习python</li></ul><h4 id="2-进阶"><a href="#2-进阶" class="headerlink" title="2. 进阶"></a>2. 进阶</h4><ul><li>慕课网 python3入门与进阶</li><li><a href="https://developers.google.com/edu/python/">Google’s Python Class</a></li><li>AnalyticsVidhya相关学习</li><li>网易云python</li><li>Kaggle相关学习</li><li>2018老男孩python脱产班VIP培训教程</li><li>python3零基础高级完整项目剖析</li><li>麻瓜编程 实用主义学Python教程</li><li>炼数成金Python魔鬼训练营</li></ul><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><ul><li>正则表达式、re库</li><li><a href="https://morvanzhou.github.io/">莫烦python</a></li><li>哈佛CS109</li><li>其他相关书籍</li></ul><hr><h3 id="二、相关应用相关"><a href="#二、相关应用相关" class="headerlink" title="二、相关应用相关"></a>二、相关应用相关</h3><h4 id="1-数据分析"><a href="#1-数据分析" class="headerlink" title="1. 数据分析"></a>1. 数据分析</h4><ul><li>numpy</li><li>pandas</li><li><a href="https://scipy.org/docs.html">scipy</a></li></ul><h4 id="2-可视化"><a href="#2-可视化" class="headerlink" title="2. 可视化"></a>2. 可视化</h4><ul><li><a href="https://liam.page/2014/09/11/matplotlib-tutorial-zh-cn/">matplotlib</a></li><li>seaborn</li></ul><h4 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3. 数据库"></a>3. 数据库</h4><ul><li>mongodb</li><li><a href="https://www.sqlite.org/index.html">sqlite</a></li><li>redis</li><li>mysql</li></ul><h4 id="4-爬虫"><a href="#4-爬虫" class="headerlink" title="4. 爬虫"></a>4. 爬虫</h4><ul><li>爬虫基础</li></ul><ul><li>崔庆才 python3爬虫课程视频</li><li>Python 3网络爬虫开发实战</li></ul><ul><li><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/">beautifulsoup</a></li><li><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html">requests</a></li><li>selenium</li><li>pyspider</li><li>scrapy</li><li>aiohttp</li></ul><h4 id="5-机器学习"><a href="#5-机器学习" class="headerlink" title="5. 机器学习"></a>5. 机器学习</h4><ul><li>机器学习基础入门</li></ul><ul><li>吴恩达coursera入门</li></ul><ul><li>sk-learn学习</li><li>pytorch</li><li>tensorflow</li><li>进一步学习</li></ul><h4 id="6-web相关"><a href="#6-web相关" class="headerlink" title="6. web相关"></a>6. web相关</h4><ul><li>Django</li><li><a href="http://docs.jinkan.org/docs/flask/">Flask</a></li></ul><h4 id="7-自然语言处理NLP"><a href="#7-自然语言处理NLP" class="headerlink" title="7. 自然语言处理NLP"></a>7. 自然语言处理NLP</h4><ul><li>nltk</li><li>snownlp</li><li>jieba</li><li>wordcloud</li></ul><h4 id="8-GUI相关"><a href="#8-GUI相关" class="headerlink" title="8. GUI相关"></a>8. GUI相关</h4><ul><li>tkinter</li><li><a href="https://github.com/necan/wxPython-tutorial">wxpython</a></li></ul><h4 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h4><ul><li>plotly</li><li><a href="http://pyecharts.org/#/">pyecharts</a></li></ul><hr><h3 id="三、常用的学习资源连接"><a href="#三、常用的学习资源连接" class="headerlink" title="三、常用的学习资源连接"></a>三、常用的学习资源连接</h3><ul><li><a href="http://www.apachecn.org/">ApacheCN 中文开源组织</a></li><li><a href="https://hand2st.apachecn.org/#/">Sklearn 与 TensorFlow 机器学习实用指南</a></li><li><a href="https://wizardforcel.gitbooks.io/sklearn-cookbook/content/">Scikit-learn 秘籍</a></li><li><a href="http://old.sebug.net/paper/books/scipydoc/index.html">用Python做科学计算</a></li><li><a href="http://www.cnblogs.com/luowei2018/p/10141621.html?utm_source=tuicool&utm_medium=referral">Python3中的68个内置函数总结</a></li><li><a href="https://www.makcyun.top/">高级农民工博客</a></li><li><a href="https://pythoncaff.com/docs">Python开发者社区中文文档</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/preface.html">python3-cookbook</a></li><li><a href="https://www.zybuluo.com/chanvee/note/87377">数据科学的完整学习路径—Python版（转载）</a></li><li><a href="https://www.w3cschool.cn/python/dict">python速查词典</a></li><li><a href="http://learnpython.org/">LearnPython</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/01/1/"/>
      <url>/2020/03/01/1/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
